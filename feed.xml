<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-12T22:55:07+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Leighton’s Blog</title><subtitle>Learning &amp; Sharing
</subtitle><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><entry><title type="html">博客的图片支持测试</title><link href="http://localhost:4000/learning/2023/12/12/Image-Support.html" rel="alternate" type="text/html" title="博客的图片支持测试" /><published>2023-12-12T00:00:00+08:00</published><updated>2023-12-12T00:00:00+08:00</updated><id>http://localhost:4000/learning/2023/12/12/Image-Support</id><content type="html" xml:base="http://localhost:4000/learning/2023/12/12/Image-Support.html"><![CDATA[<p>根据 Jekyll 的官方文档尝试进行图片支持。一张都市天际线城市的轨交地图：
<img src="/assets/images/RailwayMap.png" alt="有帮助的截图" /></p>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="learning" /><summary type="html"><![CDATA[根据 Jekyll 的官方文档尝试进行图片支持。一张都市天际线城市的轨交地图：]]></summary></entry><entry><title type="html">AirSim：PX4软件在环仿真</title><link href="http://localhost:4000/learning/2023/12/11/AirSim-with-PX4.html" rel="alternate" type="text/html" title="AirSim：PX4软件在环仿真" /><published>2023-12-11T00:00:00+08:00</published><updated>2023-12-11T00:00:00+08:00</updated><id>http://localhost:4000/learning/2023/12/11/AirSim-with-PX4</id><content type="html" xml:base="http://localhost:4000/learning/2023/12/11/AirSim-with-PX4.html"><![CDATA[<p>今天被在 WSL2 上配置 PX4 困扰了许久，记录以下近几天解决该问题的过程。</p>

<h1 id="目的">目的</h1>
<p>想要在 AirSim 仿真中使用 PX4 作为飞控。由于手边并没有 Pixhawk、树莓派之类的硬件，考虑使用 Windows Subsystem Linux 2 (WSL2) 作为 PX4 的载体。</p>

<h1 id="wsl-安装">WSL 安装</h1>
<ol>
  <li>在 “Windows功能” 中勾选 “适用于 Linux 的 Windows 子系统” 与 “虚拟机平台” 两个选项</li>
  <li>安装 Linux 发行版
    <ol>
      <li>在 PowerShell 中输入
 <code class="language-plaintext highlighter-rouge">wsl --install</code>
 即可安装最新的 Ubuntu 发行版</li>
      <li>按照提示创建账户与密码
        <ul>
          <li>遇到错误0x800701bc，需更新 WSL 内核至最新版本：https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</li>
        </ul>
      </li>
      <li>将 WSL 迁移至其他盘防止 C 盘爆炸
        <ul>
          <li>关闭当前 WSL
 <code class="language-plaintext highlighter-rouge">wsl --shutdown</code></li>
          <li>迁移
 <code class="language-plaintext highlighter-rouge">wsl --export Ubuntu E:/export.tar</code></li>
          <li>将原有的Linux卸载
 <code class="language-plaintext highlighter-rouge">wsl --unregister Ubuntu</code></li>
          <li>将导出的文件放到需要保存的地方，进行导入即可
` wsl –import Ubuntu E:\export\ E:\export.tar –version 2`</li>
        </ul>
      </li>
    </ol>
  </li>
</ol>

<h1 id="airsim-安装">AirSim 安装</h1>
<p>此前已完成，此处不再赘述。可参考https://zhuanlan.zhihu.com/p/618440744</p>

<h1 id="px4-安装与配置">PX4 安装与配置</h1>
<ol>
  <li>
    <p>下载
 启动 WSL2，新建保存 PX4 的文件夹并进入
 <code class="language-plaintext highlighter-rouge">mkdir PX4</code>
 <code class="language-plaintext highlighter-rouge">cd PX4</code>
 使用 git 下载
 <code class="language-plaintext highlighter-rouge">git clone https://github.com/PX4/PX4-Autopilot.git</code>
 <code class="language-plaintext highlighter-rouge">cd PX4-Autopilot</code></p>
  </li>
  <li>在 SITL (Software-In-Loop) 模式下构建并启动 PX4 固件：
 <code class="language-plaintext highlighter-rouge">make px4_sitl_default none_iris</code>
    <ul>
      <li>记得在构建似乎会显示缺少某个 Python Module，使用 pip 安装后重新执行词条命令即可</li>
    </ul>
  </li>
  <li>
    <p>构建完成后，Linux 命令行窗口应该会显示
<code class="language-plaintext highlighter-rouge">INFO [simulator] Waiting for simulator to accpet connection on TPC port 4560</code>
此时已构建完成，进入了运行状态，可以先使用 ctrl+C 退出运行。</p>
  </li>
  <li>更改 settings.json
 目前，我们的 AirSim 仍在 simple_flight 模式。我们需要更改主机中的 <code class="language-plaintext highlighter-rouge">文档/AirSim/settings.json</code>为以下内容：
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="p">{</span><span class="w">
     </span><span class="nl">"SettingsVersion"</span><span class="p">:</span><span class="w"> </span><span class="mf">1.2</span><span class="p">,</span><span class="w">
     </span><span class="nl">"SimMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Multirotor"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"ClockType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SteppableClock"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"Vehicles"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
         </span><span class="nl">"PX4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
             </span><span class="nl">"VehicleType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PX4Multirotor"</span><span class="p">,</span><span class="w">
             </span><span class="nl">"UseSerial"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
             </span><span class="nl">"LockStep"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
             </span><span class="nl">"UseTcp"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
             </span><span class="nl">"TcpPort"</span><span class="p">:</span><span class="w"> </span><span class="mi">4560</span><span class="p">,</span><span class="w">
             </span><span class="nl">"ControlIp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"172.30.146.169"</span><span class="p">,</span><span class="w">
             </span><span class="nl">"ControlPortLocal"</span><span class="p">:</span><span class="w"> </span><span class="mi">14540</span><span class="p">,</span><span class="w">
             </span><span class="nl">"ControlPortRemote"</span><span class="p">:</span><span class="w"> </span><span class="mi">14580</span><span class="p">,</span><span class="w">
             </span><span class="nl">"LocalHostIp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"172.30.144.1"</span><span class="p">,</span><span class="w">
             </span><span class="nl">"Sensors"</span><span class="p">:{</span><span class="w">
                 </span><span class="nl">"Barometer"</span><span class="p">:{</span><span class="w">
                     </span><span class="nl">"SensorType"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
                     </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                     </span><span class="nl">"PressureFactorSigma"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0001825</span><span class="w">
                 </span><span class="p">}</span><span class="w">
             </span><span class="p">},</span><span class="w">
             </span><span class="nl">"Parameters"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                 </span><span class="nl">"NAV_RCL_ACT"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"NAV_DLL_ACT"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"COM_OBL_ACT"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"LPE_LAT"</span><span class="p">:</span><span class="w"> </span><span class="mf">47.641468</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"LPE_LON"</span><span class="p">:</span><span class="w"> </span><span class="mf">-122.140165</span><span class="w">
             </span><span class="p">}</span><span class="w">
         </span><span class="p">}</span><span class="w">
     </span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
    <p><strong>注意</strong>，<code class="language-plaintext highlighter-rouge">"LocalHostIp"</code> 与 <code class="language-plaintext highlighter-rouge">"ControlIp"</code> 字段分别应为主机和 WSL 的 IP 地址！</p>
    <ul>
      <li>在主机的命令行中输入 <code class="language-plaintext highlighter-rouge">ipconfig</code>，“以太网适配器 vEthernet (WSL)” 中的 “IPV4 地址” 即为主机地址</li>
      <li>在 Linux 命令行中输入 <code class="language-plaintext highlighter-rouge">ip address show</code> 即可查看 WSL 的 IP 地址</li>
    </ul>
  </li>
  <li>
    <p>设置环境变量
我们需要让 Linux 指导自己在和谁通讯，故在 Linux 命令行中输入以下命令以添加（或改变）环境变量
<code class="language-plaintext highlighter-rouge">export PX4_SIM_HOST_ADDR=172.30.144.1</code>
注意，此处的 IP 地址应为主机 IP。</p>
  </li>
  <li>更改 Linux 中的 <code class="language-plaintext highlighter-rouge">PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/rcS</code> 文件
更改这个文件之前，我一度出现了 PX4 与 AirSim 无法连接、成功连接后无法使用 Python API 等问题。经过仔细阅读官方文档中的 “PX4 SITL with WSL2”，发现了此处需要更改，原因未知（悲）。如果没有以下内容，则将它们加入到该文件中：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # If PX4_SIM_HOST_ADDR environment variable is empty use localhost.
 if [ -z "${PX4_SIM_HOST_ADDR}" ]; then
     echo "PX4 SIM HOST: localhost"
     simulator start -c $simulator_tcp_port
 else
     echo "PX4 SIM HOST: $PX4_SIM_HOST_ADDR"
     simulator start -t $PX4_SIM_HOST_ADDR $simulator_tcp_port
 fi
</code></pre></div>    </div>
  </li>
  <li>完成后，启动 sln 文件的调试以进入 UE4 编辑器，并在 Linux 中启动 PX4：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> make px4_sitl_defalut none_iris
</code></pre></div>    </div>
    <p>我们就完成了 PX4 作为飞控的 AirSim 仿真啦！</p>
  </li>
</ol>

<h1 id="使用">使用</h1>
<ul>
  <li>可以在 PX4 端输入命令以控制无人机，如 <code class="language-plaintext highlighter-rouge">commander takeoff</code> 可控制无人机起飞，<code class="language-plaintext highlighter-rouge">commander land</code> 可控制无人机降落。</li>
  <li>调用 Python API 的操作与使用 simple_flight 模式下相同，直接运行 Python 脚本即可！</li>
</ul>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="learning" /><summary type="html"><![CDATA[今天被在 WSL2 上配置 PX4 困扰了许久，记录以下近几天解决该问题的过程。]]></summary></entry><entry><title type="html">SLAM技术学习：滤波</title><link href="http://localhost:4000/learning/2023/07/13/filter.html" rel="alternate" type="text/html" title="SLAM技术学习：滤波" /><published>2023-07-13T00:00:00+08:00</published><updated>2023-07-13T00:00:00+08:00</updated><id>http://localhost:4000/learning/2023/07/13/filter</id><content type="html" xml:base="http://localhost:4000/learning/2023/07/13/filter.html"><![CDATA[<p>假期总该学点东西。对 SLAM 技术有一些兴趣，小开一个坑。</p>

<h1 id="什么是-slam">什么是 SLAM</h1>
<p>S.L.A.M.全称为Simultaneous Localization and Mapping，是以定位和建图两大技术为目标的一个研究领域。目前主流的SLAM技术应用为激光SLAM(基于激光雷达)和视觉SLAM(基于单/双目摄像头)，实现上主要分为基于滤波 （Filter-Based） 的SLAM，和基于图优化（Graph-Based）的SLAM。</p>

<p>SLAM 的架构如下图所示。
<img src="/assets/images/SLAM_arch.jpg" alt="" /></p>

<h1 id="基于滤波的传感器融合算法方案">基于滤波的传感器融合算法方案</h1>
<p>归结基于滤波的定位算法的核心技术，其实就是贝叶斯滤波或者其衍生算法。整体上的流程大抵都是基于上一时刻的状态量，通过控制量输入和运动方程的推演获取预测的状态量，再由相关传感器的观测对预测进行融合“补偿”。</p>

<h1 id="滤波算法卡尔曼滤波">滤波算法：卡尔曼滤波</h1>
<p>今天 <del>预习</del> 复习一下机器人综合实践课程中介绍的卡尔曼滤波算法。</p>

<h3 id="滤波器">滤波器</h3>
<p>在 DSP 中接触过滤波器。主要用于滤除信号中的噪声。以下面离散时间的低通滤波器为例：</p>

<div class="kdmath">$$
y_t=\alpha x_t + (1-\alpha)y_{t-1}
$$</div>

<p>它的截止频率为 $f_c=\frac{\alpha}{(1-\alpha)2\pi \Delta t}$。其中 $\Delta t$是采样周期。任何频率大于 $f_c$ 的信号通过该滤波器都会得到极大的衰减，可以用于滤除高频噪声。</p>

<p>Kalman 滤波器则不同。它直接在时域中处理滤波问题，并且在线性系统下是最小方差估计。1960 年，时任美
国宇航局加利福尼亚州 Ames Research Center（ARC）动力分析处主任的斯坦尼 • 施密特（Stanley F. Schmidt）正在阿波罗-11 号登月计划中主持导航项目。当年，宇宙飞船从陀螺仪、加速度计和雷达等传感器上获取的测量数据中充满了不确定性误差和随机噪声，严重地威胁着高速飞向月球并降落其岩石表面的宇宙飞船及宇航员的安全。因此他们必须从测量数据中把噪声滤掉，以便对飞船所处位置和运动速度作出非常精确的估算。经过多方认证和周密思考之后，施密特决定在阿波罗-11 号登月计划中采用 Kalman 滤波器，并成功让阿波罗-11 号在地球和月球之间飞了一个来回。</p>

<h3 id="最小协方差估计与后验概率传递">最小协方差估计与后验概率传递</h3>
<p>Kalman 滤波器是对信号的最小方差估计，其实现手段是通过迭代的方式计算隐 Markov 模型中隐状态的后验分布的数学期望。</p>

<h3 id="kalman-滤波的数学原理">Kalman 滤波的数学原理</h3>
<p><em>此处简化了推导，仅从噪声服从高斯分布的情况推导。事实上 Kalman 本人对于该滤波器的推导是基于 Hilbert 空间下的投影原理。</em></p>

<p>假设现有下列隐 Markov 模型：</p>

<p><span class="kdmath">$x_{t+1}=A_t x_t + Bu_t +w_t$</span>
<span class="kdmath">$y_t=C_tx_t+v_t$</span></p>

<p>其中 $x_t\in\mathbb R^n$ 为系统的状态；$y_t\in\mathbb R^p$ 为对系统的观测（或系统的输出），$w_t\sim \mathcal N(0,1)$ 为过程噪声，$v_t\sim\mathcal N(0,\Sigma_v)$ 为观测噪声；$w_t$ 和 $v_t$ 均为白噪声；初始状态的先验分布为 $x_1\sim\mathcal N(m_1,P_1)$。</p>

<p>依据上述假设，可知</p>

<div class="kdmath">$$
\begin{align*}
p(x_{t+1}|x_t,u_t)=\mathcal N(A_tx_t+Bu_t,\Sigma_w) \\
p(y_t|x_t)=\mathcal N(C_tx_t,\Sigma_v)
\end{align*}
$$</div>

<p>以下有两个引理，证明略。</p>

<hr />

<p><strong>Lemma 1</strong> 若 $x\in\mathbb R^{d_x}\sim\mathcal N(m,p),y\in\mathbb R^{d_y}|x \sim \mathcal N(Hx+u,R)$，则
$x$ 和 $y$ 的联合分布服从</p>

<div class="kdmath">$$
\begin{bmatrix}
x\\
y
\end{bmatrix}\sim\mathcal N\left(\begin{bmatrix}
m\\
Hm+u
\end{bmatrix},\begin{bmatrix}
P & PH^\top\\
HP & HPH^\top+R
\end{bmatrix}\right)
$$</div>

<p><strong>Lemma 2</strong> 如果随机向量 $x\in\mathbb R^n$ 和 $y\in\mathbb R^m$ 服从以下联合高斯分布</p>

<div class="kdmath">$$
\begin{bmatrix}
x\\
y
\end{bmatrix}\sim\mathcal N\left(\begin{bmatrix}
a\\
b
\end{bmatrix},\begin{bmatrix}
A & C\\
C^\top & B
\end{bmatrix}\right)
$$</div>

<p>则</p>

<div class="kdmath">$$
\begin{align*}
x\sim \mathcal N(a,A),\quad y\sim\mathcal N(b,B) \\
x|y\sim\mathcal N(a+CB^{-1}(y-b),A-CB^{-1}C^\top)\\
y|x\sim\mathcal N(b+C^\top A^{-1}(x-a),B-C^\top A^{-1}C)
\end{align*}
$$</div>

<hr />

<p>有了上述两个引理，我们可以在高斯噪声的假设下推导 Kalman 滤波器的迭代时。不妨假设
$x_t|u_{1:t-1},y_{1:t}\sim \mathcal N(\hat x_{t|t},P_{t|t})$。由引理 1 可得</p>

<div class="kdmath">$$
\begin{align*}
p(x_{t+1},x_t|u_{1:t},y_{1:t})&=p(x_{t+1}|x_t,u_t)p(x_t|u_{1:t-1},y_{1:t})\sim\mathcal N(A_tx_t+Bu_t,\Sigma_w)\mathcal N(\hat x_{t|t},P_{t|t}) \\
&\sim\mathcal N\left( \begin{bmatrix}
\hat x_{t|t} \\
A_tx_{t|t}+Bu_t
\end{bmatrix},\begin{bmatrix}
P_{t|t} & P_{t|t}A_t^\top \\
A_tP_{t|t} & A_tP_{t|t}A^\top+\Sigma_w
\end{bmatrix}\right)
\end{align*}
$$</div>

<p>由引理 2 可得</p>

<div class="kdmath">$$
p(x_{t+1}|u_{1:t},y_{1:t})=\mathcal N(A_t\hat x_{t|t}+Bu_t, A_tP_{t|t}A^\top+\Sigma_w)
$$</div>

<p>至此，我们得到了 Kalman 滤波器的前半部分 Prediction step:</p>

<div class="kdmath">$$
\begin{align*}
\hat x_{t+1|t}=A_t\hat x_{t|t}+Bu_t \\
P_{t+1|t}=A_tP_{t|t}A^\top+\Sigma_w
\end{align*}
$$</div>

<p>另一方面，根据引理 1，有
<span class="kdmath">$\begin{align*}
p(x_{t+1},y_{t+1}|u_{1:t},y_{1:t}) &= p(y_{t+1}|x_{t+1})p(x_{t+1}|u_{1:t},y_{1:t}) \\
&\sim\mathcal N(C_tx_t,\Sigma_v)\mathcal N(\hat x_{t+1|t},P_{t+1|t}) \\
&=\mathcal N\left(\begin{bmatrix}
\hat x_{t+1|t} \\
C\hat x_{t+1|t}
\end{bmatrix},\begin{bmatrix}
P_{t+1|t} & P_{t+1|t} C^\top \\
CP_{t+1|t} & CP_{t+1|t}C^\top+\Sigma_v
\end{bmatrix}\right)
\end{align*}$</span></p>

<p>根据引理 2，可进一步求得后验概率分布</p>

<div class="kdmath">$$
p(x_{t+1}|u_{1:t},y_{1:t+1})=\mathcal N(\hat x_{t+1|t+1},P_{t+1|t+1})
$$</div>

<p>其中，</p>

<div class="kdmath">$$
\begin{align*}
&\hat x_{t+1|t+1}=\hat x_{t+1|t}+P_{t+1|t} C^\top(CP_{t+1|t}C^\top+\Sigma_v)^{-1} (y_{t+1}-C\hat x_{t+1|t}) \\
&P_{t+1|t+1}=P_{t+1|t}-P_{t+1|t}C^\top(CP_{t+1|t}C^\top+\Sigma_v)^{-1} C(P_{t+1|t})
\end{align*}
$$</div>

<p>此即 Kalman 滤波器的后半部分 Correction (Update) Step。</p>

<p>此，我们得到了 Kalman 滤波器的后半部分——Correction （Update）Step。Kalman 滤波器通过 Prediction step 和 Correction step 交替迭代，成功地通过 $p(x_t
| u_{1:t−1}, y_{1:t})$ 来计算 $p(x_{t+1} | u_{1:t}
, y_{1:t+1})$。值得注意的是，该算法需要一个初始分布 $p(x_1)$，用于求 $p(x_1 | y_1)$，
所以我们需要指定 $x_1$ 的先验分布 $x_1\sim \mathcal N (m_1, P_1)$。</p>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="learning" /><summary type="html"><![CDATA[假期总该学点东西。对 SLAM 技术有一些兴趣，小开一个坑。]]></summary></entry><entry><title type="html">My First Blog</title><link href="http://localhost:4000/learning/2023/07/10/first-blog.html" rel="alternate" type="text/html" title="My First Blog" /><published>2023-07-10T00:00:00+08:00</published><updated>2023-07-10T00:00:00+08:00</updated><id>http://localhost:4000/learning/2023/07/10/first-blog</id><content type="html" xml:base="http://localhost:4000/learning/2023/07/10/first-blog.html"><![CDATA[<p>This is my first blog! Hello World!</p>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="learning" /><summary type="html"><![CDATA[This is my first blog! Hello World!]]></summary></entry><entry><title type="html">Latex Support For My Blog</title><link href="http://localhost:4000/learning/2023/07/10/latex-support-for-my-blog.html" rel="alternate" type="text/html" title="Latex Support For My Blog" /><published>2023-07-10T00:00:00+08:00</published><updated>2023-07-10T00:00:00+08:00</updated><id>http://localhost:4000/learning/2023/07/10/latex-support-for-my-blog</id><content type="html" xml:base="http://localhost:4000/learning/2023/07/10/latex-support-for-my-blog.html"><![CDATA[<p>My blog has been established successfully today. However, Jekyll’s native Markdown interpreter doesn’t always work well with Latex. This article records how I add $\LaTeX$ support for my site.</p>

<ul>
  <li>Disable the math intepreter of Kramdown by adding the following code in _config.yml</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">kramdown:
    math_engine: </span><span class="n">null</span>
    </code></pre></figure>

<ul>
  <li>Include MathJax by adding the following script in ./_includes/head.html</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s2">"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span> <span class="n">type</span><span class="o">=</span><span class="s2">"text/javascript"</span><span class="o">&gt;&lt;</span><span class="sr">/script&gt;
&lt;script type="text/x</span><span class="o">-</span><span class="n">mathjax</span><span class="o">-</span><span class="n">config</span><span class="s2">"&gt;
  MathJax.Hub.Config({
    tex2jax: {
      skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
      inlineMath: [['$','$']]
    }
  });
&lt;/script&gt;
    </span></code></pre></figure>

<p>Now we can enter the $\LaTeX$ equations successfully! For example:</p>

<div class="kdmath">$$
e^{i\theta}=\cos\theta+i\sin\theta
$$</div>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="learning" /><summary type="html"><![CDATA[My blog has been established successfully today. However, Jekyll’s native Markdown interpreter doesn’t always work well with Latex. This article records how I add $\LaTeX$ support for my site.]]></summary></entry><entry><title type="html">Welcome To Jekyll</title><link href="http://localhost:4000/2016/05/20/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome To Jekyll" /><published>2016-05-20T00:00:00+08:00</published><updated>2016-05-20T00:00:00+08:00</updated><id>http://localhost:4000/2016/05/20/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/2016/05/20/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="http://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>