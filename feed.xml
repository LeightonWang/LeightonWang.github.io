<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-26T20:29:35+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Leighton’s Blog</title><subtitle>Learning &amp; Sharing
</subtitle><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><entry><title type="html">雪国与大海：沈阳、大连游记</title><link href="http://localhost:4000/%E8%A1%8C%E4%B8%96%E8%B7%AF/trip-to-liaoning/" rel="alternate" type="text/html" title="雪国与大海：沈阳、大连游记" /><published>2023-12-26T00:00:00+08:00</published><updated>2023-12-26T00:00:00+08:00</updated><id>http://localhost:4000/%E8%A1%8C%E4%B8%96%E8%B7%AF/trip-to-liaoning</id><content type="html" xml:base="http://localhost:4000/%E8%A1%8C%E4%B8%96%E8%B7%AF/trip-to-liaoning/"><![CDATA[<p>作为一个南方孩子，一睹万里雪飘的北国风采一直是心里的一个愿望。正值防控放开后的第一个冬至遇上大四较为闲暇的时光，决定背起行囊前往东北，与在沈阳上学的好兄弟 LJ 来一趟旅行。许久未写作，这想必是一篇疏于文笔的流水账式的博客，且记录一下一路的见闻与感受。</p>

<hr />

<h1 id="沈阳篇">沈阳篇</h1>
<h2 id="12月21日前往沈阳拜见沈阳大街">12月21日：前往沈阳，拜见沈阳大街</h2>
<p>21日上午8:00，起床准备前往浦东机场。上班高峰期的上海地铁让我对未来的生活不禁升起了一丝担忧。乘坐CZ6504次航班，于上午12:00从浦东机场起飞，下午14:30到达沈阳桃仙机场。</p>

<p>在国内到达处与 LJ 汇合后，一同前往住处安顿了行李。在附近小馆子来了一顿正宗东北菜、参观完哥们的辽大崇山校区后，便打车前往狠活界的耶路撒冷<a href="https://j.map.baidu.com/63/TbLh">沈阳大街</a>（辽宁省沈阳市于洪区北陵街道黑山路12-1），奉上冰红茶与AD钙作为贡品，表达了对弟中之弟的崇高敬意（迫真</p>

<p><img src="/assets/images/Trip1/ShenyangStreet1.jpg" alt="沈阳大街" />
<img src="/assets/images/Trip1/ShenyangStreet2.jpg" alt="弟中之弟" /></p>

<h2 id="12月22日棋盘山一日">12月22日：棋盘山一日</h2>
<p>这注定是这趟旅行中最快乐的一天！<del>出于对谷爱凌的敬佩</del>在 LJ 的带领下，前往<a href="https://j.map.baidu.com/97/BvGK">棋盘山</a>进行人生第一次滑雪！</p>

<p>吃过早饭、在公交车上打了一路荒野乱斗后，我们于12点左右到达棋盘山，装备完成准备开始！
<img src="/assets/images/Trip1/ski_selfy.jpg" alt="selfie" /></p>

<p>经过滑雪带师 LJ 的双板滑雪要领教学和三趟初级道的体验后，我们前往了中级道：
<img src="/assets/images/Trip1/ski_landscape.jpg" alt="mid" />
经过一次顺利滑行后，刚上板 1.5h 从未摔跤、信心爆棚的我提议下次直接滑到魔毯（运送人们到坡顶的传送带）起点以便下次上坡。这个完美的提案随着我准备停在魔道边时减速不力、一头扎在魔道边的防护栏、滑雪杖飞出一根不见踪影戛然而止，方圆五米内充满了快活的空气。寻找消失的滑雪杖未果后，我们推理认为它可能掉在魔毯上、被运到了坡顶（确实如此）。</p>

<p>滑雪杖失而复得、又进行了一次成功下降后，我们乘坐缆车前往高级道的坡顶！
<img src="/assets/images/Trip1/ski_figure.jpg" alt="top" />
我们兵分两路，我沿背面中级道坡度但有一个大转弯的雪道下降，LJ 则顺着笔直的高级道直接下滑。于坡底成功会和后，大呼过瘾的我们决定再来一次：（记住这个yes）
<img src="/assets/images/Trip1/yeah.jpg" alt="yeah" />
于是我在坡道中间<del>精彩表演</del>失去控制来了一个180°回旋后成功梭翻在地。再写就不礼貌了 :(</p>

<p>后来，在经历了分头行动、LJ 的手机没电、我的手机卡罢工、大喇叭找人等一系列蛋疼事件后，打车回到了市区。</p>

<hr />

<h1 id="大连篇">大连篇</h1>
<h2 id="12月23日前往大连海滨的城市漫步">12月23日：前往大连，海滨的城市漫步</h2>
<p>23日，作为特种兵反例的二人起了个大早，前往沈阳站乘坐 K7322 次列车前往大连。在 Minecraft 中辛勤劳作 5 小时、榨干一整个充电宝后，我们于中午 12:40 左右到达了大连站。
<img src="/assets/images/Trip1/dalian_station.jpg" alt="大连站" /></p>

<p>前往酒店安顿后，我们在中山区及周边漫步一趟。</p>

<h3 id="中山广场">中山广场</h3>
<p><img src="/assets/images/Trip1/Zhongshan_square.jpg" alt="zhongshan" /></p>

<h3 id="友好广场">友好广场</h3>
<p>在这里的天主教堂发现了 21 世纪的转世耶稣，真是与时俱进啊（赞赏
<img src="/assets/images/Trip1/KFC.jpg" alt="KFC" />
进去聆听了吮指原味鸡的福音并探索了一下，发现二层餐厅有一个露台可以一览友好广场的风光，遂拍摄游客照若干
<img src="/assets/images/Trip1/Youai_square.jpg" alt="youhao" /></p>

<h3 id="大连中心">大连中心</h3>
<p>沿着中山路继续向西，发现了两栋风格出众（高得一批）的高楼：
<img src="/assets/images/Trip1/dalian_centre_far.jpg" alt="大连中心远景" />
经地图查证为<a href="https://j.map.baidu.com/be/ifQK">大连中心</a>。在带探险家 LJ 的提议下，我们试探性地乘坐电梯登上了大连中心ST1的顶层，得以俯瞰大连的夜景
<img src="/assets/images/Trip1/Dalian_centre.jpg" alt="daliancentre" /></p>

<h3 id="梭鱼湾">梭鱼湾</h3>
<p>久闻大连人队的主场梭鱼湾足球场之大名，我们决定在吃饭前先去梭鱼湾看看。可惜天色已晚（时间上并不），并没有辨认出灯光的梭鱼湾球场，但看到了传说中的<del>达里安造船厂</del>大连造船厂。
<img src="/assets/images/Trip1/Suoyuwan.jpg" alt="suoyuwan" />
<img src="/assets/images/Trip1/Dalian_ship.jpg" alt="ship" /></p>

<p>晚饭吃的带美食家 LJ 寻找的大连老菜馆，有一种误入会员制餐厅的感觉，也许是我没有那个享用海鲜的服气罢（悲</p>

<h2 id="12月24日老虎滩星海广场">12月24日：老虎滩、星海广场</h2>
<p>看海的一天。本来打算租个车沿着海岸来一趟愉快的自驾游，没想到两个人的微信支付分都没有达到 650 无法免押金租车，于是又是靠地铁和花小猪出行的一天（恼</p>

<p>起了个大晚，在汉巴味德嗯造一顿午餐后，我们开始了今天的行程。
<img src="/assets/images/Trip1/hanbaweide.jpg" alt="hanbaweide" /></p>

<h3 id="老虎滩">老虎滩</h3>
<p><img src="/assets/images/Trip1/laohutan.jpg" alt="laohutan" /></p>

<h3 id="星海广场">星海广场</h3>
<p>星海广场呈一个以北偏西-南偏东方向为长轴的椭圆，四周巍峨的高楼共同构筑了大连最摩登、最壮观的天际线。</p>

<p><img src="/assets/images/Trip1/XinghaiSquare.jpg" alt="xinghai" /></p>

<p>椭圆的长轴向南延申，似乎便是星海湾大桥的对称轴。大桥屹立在海上，形成的不知是对这座城市的拱卫还是对城市于大海的撕裂。</p>

<p><img src="/assets/images/Trip1/xinghaiwan_bridge.jpg" alt="xinghai_bridge" /></p>

<p><img src="/assets/images/Trip1/XinghaiBay_birds.jpg" alt="xinghai_bay" /></p>

<p><img src="/assets/images/Trip1/Xinghai_selfie.jpg" alt="xinghai_selfie" /></p>

<hr />

<h1 id="结语">结语</h1>
<p>我们在外探索的行程便到此为止了。</p>

<p>这是我第一次来到东北、第一次在厚厚的积雪上留下足迹、第一次滑雪、第一次看到蔚蓝的大海。共和国长子的人民用他们的热情与淳朴展示了这座城市的风情与生活方式，东北最南端的滨城向我们肆意展示着旖旎的风光与多元的文化构成的浪漫。楼房间大烟囱里吐出的云雾诉说着他们的故事，玻璃幕墙里略显黯淡的灯光呢喃着他们的当下。</p>

<p>时间略显紧迫，没能更加深入地探索与品味。希望以后有机会再来探访。</p>

<p><img src="/assets/images/Trip1/snowHole.jpg" alt="snow_hole" /></p>]]></content><author><name>Leighton</name></author><category term="行世路" /><summary type="html"><![CDATA[作为一个南方孩子，一睹万里雪飘的北国风采一直是心里的一个愿望。正值防控放开后的第一个冬至遇上大四较为闲暇的时光，决定背起行囊前往东北，与在沈阳上学的好兄弟 LJ 来一趟旅行。许久未写作，这想必是一篇疏于文笔的流水账式的博客，且记录一下一路的见闻与感受。]]></summary></entry><entry><title type="html">日语学习记录：基础日语（上）的语法</title><link href="http://localhost:4000/%E8%AF%AD%E8%A8%80/Japanese-Language/" rel="alternate" type="text/html" title="日语学习记录：基础日语（上）的语法" /><published>2023-12-14T00:00:00+08:00</published><updated>2023-12-14T00:00:00+08:00</updated><id>http://localhost:4000/%E8%AF%AD%E8%A8%80/Japanese-Language</id><content type="html" xml:base="http://localhost:4000/%E8%AF%AD%E8%A8%80/Japanese-Language/"><![CDATA[<p>本学期作为旁听生学习了本校的课程 FL1008-基础日语，本文用以记录本学期学到的语法和表达，以供日后温习。</p>

<p>课程所用教材为人民教育出版社出版的《标准日本语》。</p>

<hr />

<h1 id="第一单元">第一单元</h1>
<p>本单元的内容较为基础，这里总结一些自己在学习这门课程之前不是很熟悉的内容。</p>

<h2 id="事物与人的存在">事物与人的存在</h2>
<ol>
  <li>あります　与 います
表示存在的动词，あります用于不具有意志的事物，います用于具有意志的人、动物等。
    <ul>
      <li>[名(场所)] に　[名(物/人)] が　あります / います
 表示存在的句型，相当于某地有某物。
        <ul>
          <li>部屋に猫があります。      （房间里有猫）</li>
          <li>あそこに誰がいますか。    （那里有谁？）</li>
        </ul>
      </li>
      <li>[名(人/物体)] は　[名词(场所)] に　あります / います
 表示某物/某人在某个地方。
        <ul>
          <li>図書館はどこにありますか。   （图书馆在哪？）</li>
          <li>吉田さんは庭にいます。        （吉田在院子里）</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<hr />
<h1 id="第二单元动词">第二单元：动词</h1>
<p>本单元主要是动词的ます形式，包括其过去式、动作发生的时间、地点的助词等。</p>

<h2 id="动词的ます形式">动词的ます形式</h2>
<p>肯定地叙述<strong>现在的</strong>习惯性动作、状态及<strong>未来的</strong>动作、状态时，用 “~ます”　。变化如下：</p>

<table>
    <tr>
        <td></td>
        <td>肯定</td>
        <td>否定</td>
    </tr>
    <tr>
        <td>现在</td>
        <td>~ます</td>
        <td>~ません</td>
    </tr>
    <tr>
        <td>~过去</td>
        <td>~ました</td>
        <td>~ませんでした</td>
    </tr>
</table>

<h2 id="动作发生的时间">动作发生的时间</h2>
<ol>
  <li>表示动作发生的时间，使用 [名(时间)] に [动]
<strong>包含数字</strong>的时间后需要助词に，而对于 今、昨日、今日、明日、毎日、去年、来年 等词，<strong>不可</strong>接助词に。星期几(~曜日)后可加可不加。视具体时间决定时态。
    <ul>
      <li>森さんは7時に起きます。 （森先生7点起床）</li>
    </ul>
  </li>
  <li>Aから Bまで
表示从 A 到 B 的这段时间。也可以分开使用，表示从某时起 / 到某时为止。
    <ul>
      <li>私は9時から11時まで勉強しました。　（我9点到11点在学习）</li>
    </ul>
  </li>
  <li>询问时间时使用 いつ，询问的时间很具体时，在表示时间的词后加に，如 何時に、何曜日に、何日に 等。
    <ul>
      <li>試験はいつ始まりますか。  （啥时候考试？）</li>
      <li>仕事は何時に終わりますか。 （工作<strong>几点</strong>结束？）</li>
    </ul>

    <p>まで 和 から 也可以用来提问</p>
    <ul>
      <li>あなたは　何曜日まで　休みますか。 （你休息到星期几？）</li>
    </ul>
  </li>
</ol>

<h2 id="移动动词相关">移动动词相关</h2>
<p>这里主要是和移动动词相关的一些介词以及其他。</p>
<ol>
  <li>へ：名词后接助词へ，表示移动的<strong>目的地</strong>。
    <ul>
      <li>私は来月日本へ行きます。 （我下个月去日本(此乃实话)）</li>
    </ul>
  </li>
  <li>から：使用移动动词时，此助词表示从何处出发。
    <ul>
      <li>あの方はどこから来ましたか。 （那位是从哪里来的？）</li>
    </ul>
  </li>
  <li>と：表示共同做某事的对象
    <ul>
      <li>私は昨日三苫選手とサッカーをしました。 （我昨天和三苫选手踢足球。）</li>
    </ul>
  </li>
  <li>で：可用于表示交通手段
    <ul>
      <li>僕は来月飛行機で日本へ行きます。  （我下个月坐飞机去日本）</li>
    </ul>
  </li>
  <li>A から　B まで：也可以表示从某地到某地
    <ul>
      <li>僕は来月上海から大阪まで飛行機で行きます。    （我下个月从上海坐飞机去大阪。）</li>
    </ul>
  </li>
  <li>は 作助词时，除了提出主题外，还可以用作对比。
    <ul>
      <li>小野さんは今日<strong>は</strong>休みます。</li>
      <li>
        <ul>
          <li>森さん毎朝何時に起きますか。</li>
          <li>いつも<strong>は</strong>7時ごろです。
 此外，表示对比时，は可以单独使用，也可以接在其他助词后面构成复合形式。以下是两个复合形式的例句。</li>
        </ul>
      </li>
      <li>私の部屋に<strong>は</strong>電話がありません。</li>
      <li>日本へ<strong>は</strong>行きます。韓国へ<strong>は</strong>行きません。</li>
    </ul>
  </li>
</ol>

<h2 id="动作的对象与发生的场所">动作的对象与发生的场所</h2>
<ol>
  <li>を：表示动作的对象的助词，读作お。
    <ul>
      <li>敖(ごう)さんは毎日コーヒーを飲みます。  （敖先生每天都喝咖啡。）</li>
    </ul>

    <p>买东西或点菜或索取什么东西的时候，可以用「~を　ください」，例如</p>
    <ul>
      <li>コーヒーとケーキをください。</li>
      <li>申込書をください。    （请给我一张申请书。）</li>
    </ul>
  </li>
  <li>で：表示动作发生的地点
    <ul>
      <li>私はコンビニでお弁当を買いました。    （我在便利店买了盒饭）</li>
      <li>今日はどこで勉強しますか。    （今天在哪里学习？）</li>
    </ul>
  </li>
</ol>

<h2 id="手段对象人">手段、对象（人）</h2>

<ol>
  <li>で：可以表示动作的手段、原材料等
    <ul>
      <li>日本語で手紙を書きます。  （用日语写信）</li>
      <li>新聞紙で紙飛行機を作ります。 （用报纸折纸飞机）</li>
    </ul>
  </li>
  <li>に：表示动词的对象，如把某物给某人 / 从某人处收到某物，“某人” 之后要接助词に。常用来构成一些简单的双宾语。
    <ul>
      <li>僕は小野さん<strong>に</strong>花をあげます。  （我给小野送花）</li>
      <li>僕は灰原さん<strong>に</strong>チョコレートをもらいました。    （我从灰原同学那里收到了巧克力wwww）</li>
    </ul>

    <p>会います（遇到）的对象也用に作助词。</p>
    <ul>
      <li>僕は昨日図書館で張さんに会いました。  （我昨天在图书馆遇到了张）</li>
    </ul>
  </li>
</ol>

<h2 id="其他一些表达">其他一些表达</h2>
<ul>
  <li>もう：相当于汉语的“已经”。
    <ul>
      <li>昼ご飯を食べましたか。</li>
      <li>ええ、<strong>もう</strong>食べました。</li>
    </ul>
  </li>
  <li>「たった今」、「さっき」都是表示离 现在很近的过去（刚才），其中前者比后者要离现在更近一点。搭配动词过去式。</li>
</ul>

<hr />
<h1 id="第三单元形容词">第三单元：形容词</h1>]]></content><author><name>Leighton</name></author><category term="语言" /><summary type="html"><![CDATA[本学期作为旁听生学习了本校的课程 FL1008-基础日语，本文用以记录本学期学到的语法和表达，以供日后温习。]]></summary></entry><entry><title type="html">博客搭建相关总集</title><link href="http://localhost:4000/jekyll/site-build-summary/" rel="alternate" type="text/html" title="博客搭建相关总集" /><published>2023-12-13T00:00:00+08:00</published><updated>2023-12-13T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/site-build-summary</id><content type="html" xml:base="http://localhost:4000/jekyll/site-build-summary/"><![CDATA[<p>之前添加各种功能的时候零散地写了几篇东西，似乎很没有条理的样子。以后博客建设的相关内容都会集中在这里，也许会持续更新( ᐛ )</p>

<h1 id="latex-支持">$\LaTeX$ 支持</h1>
<p>首先要解决的就是 Jekyll 博客原生不支持 LaTeX 的问题，过程如下：</p>
<ul>
  <li>首先需要禁用 Kramdown 的数学引擎，做法为在 <code class="language-plaintext highlighter-rouge">_config.yml</code> 中添加以下代码</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">kramdown:
    math_engine: </span><span class="n">null</span>
    </code></pre></figure>

<ul>
  <li>添加 MathJax 支持，做法为在 <code class="language-plaintext highlighter-rouge">\_includes\head.html</code> 中添加以下代码：</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s2">"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span> <span class="n">type</span><span class="o">=</span><span class="s2">"text/javascript"</span><span class="o">&gt;&lt;</span><span class="sr">/script&gt;
&lt;script type="text/x</span><span class="o">-</span><span class="n">mathjax</span><span class="o">-</span><span class="n">config</span><span class="s2">"&gt;
  MathJax.Hub.Config({
    tex2jax: {
      skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
      inlineMath: [['$','$']]
    }
  });
&lt;/script&gt;
    </span></code></pre></figure>

<p>现在我们可以愉快地书写数学公式啦！</p>
<ul>
  <li>例
    <ul>
      <li>$\LaTeX$ 代码
        <div class="language-LaTeX highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="p">$$</span><span class="nb">H</span><span class="o">(</span><span class="nb">e</span><span class="p">^{</span><span class="nb">j</span><span class="nv">\omega</span><span class="p">}</span><span class="o">)=</span><span class="nv">\int</span><span class="p">_{</span><span class="o">-</span><span class="nv">\infty</span><span class="p">}^</span><span class="nv">\infty</span><span class="nb"> x</span><span class="o">(</span><span class="nb">t</span><span class="o">)</span><span class="nb">e</span><span class="p">^{</span><span class="o">-</span><span class="nb">j</span><span class="nv">\omega</span><span class="nb"> t</span><span class="p">}{</span><span class="nv">\rm</span><span class="nb"> d</span><span class="p">}</span><span class="nb">x</span><span class="p">$$</span>
</code></pre></div>        </div>
      </li>
      <li>输出</li>
    </ul>

    <div class="kdmath">$$
H(e^{j\omega})=\int_{-\infty}^\infty h(t)e^{-j\omega t}{\rm d}t
$$</div>
  </li>
</ul>

<hr />

<h1 id="添加图片的方法">添加图片的方法</h1>
<p>根据 <a href="https://jekyllcn.com/docs/posts/">Jekyll 官方文档</a>，添加图片应使用如下代码：</p>
<pre><code class="language-Markdown">![有帮助的截图](http://localhost:4000/assets/images/RailwayMap.jpg)
</code></pre>
<p>然而经过实测，这种方法虽然可以在本地使用 <code class="language-plaintext highlighter-rouge">jekyll s</code> 命令预览时显示图片，部署到 GitHub 后却无法显示。对 GitHub Page 进行检查后发现，该图片元素的连接仍然为 <code class="language-plaintext highlighter-rouge">localhost:4000/assets/images/RailwayMap.png</code>。</p>

<p>经查证与实践，官方文档中给出的代码中的 <code class="language-plaintext highlighter-rouge">http://localhost:4000</code> 并无必要，直接使用后面的相对路径即可：</p>
<pre><code class="language-Markdown">![有帮助的截图](/assets/images/RailwayMap.png)
</code></pre>
<p>渲染效果：
<img src="/assets/images/RailwayMap.png" alt="有帮助的截图" /></p>

<hr />

<h1 id="博客分页">博客分页</h1>
<p>所有博客都显示在同一页难免显得冗长，因此我们需要分页功能。</p>

<p>根据官方文档：</p>
<ul>
  <li>
    <p>我们首先需要安装 <code class="language-plaintext highlighter-rouge">jekyll-paginate</code> 插件。在根目录下执行以下命令：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gem install jekyll-paginate
  bundle
</code></pre></div>    </div>
  </li>
  <li>
    <p>在根目录中的 <code class="language-plaintext highlighter-rouge">Gemfile </code>中添加：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  gem "jekyll-paginate"
</code></pre></div>    </div>
  </li>
  <li>
    <p>在 <code class="language-plaintext highlighter-rouge">_config.yml</code> 中添加以下代码，开启分页功能并设置每页存储10篇博客</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  paginate: 10
  paginate_path: "page:num"
</code></pre></div>    </div>
  </li>
</ul>

<p>官方文档的教程到此为止。然而这样并不能够在我的模板中运行。我在<a href="https://huangjieqi.gitee.io/huangjieqi/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2019/06/27/Study-Notes_jekyll_Pagination.html">这篇博客</a>中找到了解决方法。所需的额外步骤如下：</p>
<ul>
  <li>文章的分页显示都需要在html文档中进行，所以需要将<code class="language-plaintext highlighter-rouge">index.md</code>修改为<code class="language-plaintext highlighter-rouge">index.html</code></li>
  <li>
    <p>为<code class="language-plaintext highlighter-rouge">index.html</code>添加分页支持：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ---
  layout: home
  paginate: true
  ---
</code></pre></div>    </div>
  </li>
</ul>

<p>现在博客就具有翻页的功能啦：（目前文章较少，一页都能放下）
<img src="/assets/images/paginate.png" alt="翻页" /></p>

<hr />

<h1 id="博客归档">博客归档</h1>
<h2 id="基本功能">基本功能</h2>
<p>为博客添加归档可以清晰分辨出文章的类别。我参考了<a href="https://zoharandroid.github.io/2019-08-02-Jekyll%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BBCategory%E5%8A%9F%E8%83%BD/">这篇博客</a>中的教程。</p>

<ul>
  <li>
    <p>修改 <code class="language-plaintext highlighter-rouge">_config.yml</code> 文件，添加以下一行代码：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  permalink: /:categories/:title/
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>创建 categories.html 文件</strong>：在根目录下创建<code class="language-plaintext highlighter-rouge">categories.html</code>文件，并写入以下内容：</p>

    <pre><code class="language-HTML">  ---
  layout: page
  permalink: /categories/
  title: 博客分类
  ---

  &lt;!--添加搜索框--&gt;
  &lt;br/&gt;
  &lt;!-- HTML elements for search --&gt;
  &lt;input type="text" id="search-input" placeholder="搜索博客 - 输入标题/相关内容/日期/Tags.." style="width:380px;"/&gt;
  &lt;ul id="results-container"&gt;&lt;/ul&gt;

  &lt;!-- script pointing to jekyll-search.js --&gt;
  &lt;script src="\{\{ site.baseurl \}\}/js/simple-jekyll-search.min.js"&gt;&lt;/script&gt;

  &lt;script&gt;
  SimpleJekyllSearch({
      searchInput: document.getElementById('search-input'),
      resultsContainer: document.getElementById('results-container'),
      json: '/search.json',
      searchResultTemplate: '&lt;li&gt;&lt;a href="{url}" title="{desc}"&gt;{title}&lt;/a&gt;&lt;/li&gt;',
      noResultsText: '没有搜索到文章',
      limit: 20,
      fuzzy: false
  })
  &lt;/script&gt;
  &lt;br/&gt;


  &lt;div id="archives"&gt;
  {\%\for category in site.categories \%\}
  &lt;div class="archive-group"&gt;
      {\%\capture category_name \%\}\{\{ category | first \}\}{\%\endcapture \%\}
      &lt;div id="#\{\{ category_name | slugize \}\}"&gt;&lt;/div&gt;
      &lt;p&gt;&lt;/p&gt;

      &lt;h3 class="category-head"&gt;\{\{ category_name \}\} (\{\{site.categories[category_name].size()\}\})&lt;/h3&gt;
      &lt;a name="\{\{ category_name | slugize \}\}"&gt;&lt;/a&gt;
      {\%\for post in site.categories[category_name] \%\}
      &lt;article class="archive-item"&gt;
      &lt;h4&gt;&lt;a href="\{\{ site.baseurl \}\}\{\{ post.url \}\}"&gt;\{\{ post.title \}\}&lt;/a&gt;&lt;/h4&gt;
      &lt;/article&gt;
      {\%\endfor \%\}
  &lt;/div&gt;
  {\%\endfor \%\}
  &lt;/div&gt;
</code></pre>
    <p>搜索功能的代码暂时缺失，想起来的时候再加上吧 :P</p>
  </li>
  <li>
    <p>为每篇文章的 md 文件都添加一个<code class="language-plaintext highlighter-rouge">categories</code>属性，以这篇文章为例：</p>

    <pre><code class="language-Markdown">  ---
  layout: post
  title: "博客搭建相关总集"
  categories: Jekyll
  ---
</code></pre>

    <p>至此，归档页面就搭建成功啦！</p>
  </li>
  <li>
    <p>然而到这里我们却还不能在每篇文章中看出它的归档，我想让每篇文章都能直接显示出它的归档。在<code class="language-plaintext highlighter-rouge">/_layouts/post.html</code>的 <code class="language-plaintext highlighter-rouge">&lt;\header&gt;</code>标签<strong>之前</strong>添加以下代码：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  {\%\if page.categories.size &gt; 0 \%\}
          &lt;div class="blog-tags"&gt;
          Category：
          {\%\if post \%\}
              {\%\assign categories = post.categories \%\}
          {\%\else \%\}
              {\%\assign categories = page.categories \%\}
          {\%\endif \%\}
          {\%\for category in categories \%\}
              &lt;a href="\{\{site.baseurl\}\}/categories/#\{\{category|slugize\}\}"&gt;\{\{category\}\}&lt;/a&gt;
              {\%\unless forloop.last \%\}&amp;nbsp;{\%\endunless \%\}
              {\%\endfor \%\}
          &lt;/div&gt;
      {\%\endif \%\}
</code></pre></div>    </div>
  </li>
</ul>

<p>大功告成啦：</p>

<p><img src="/assets/images/categories_result.png" alt="文章显示归档" /></p>

<h2 id="展开面板">展开面板</h2>
<p>原本的归档形式最终会随着文章的增加变回一长条，所以我将归档页面<code class="language-plaintext highlighter-rouge">categories.html</code>和<a href="https://www.runoob.com/bootstrap/bootstrap-collapse-plugin.html#:~:text=1%20data-toggle%3D%22collapse%22%20%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%82%A8%E6%83%B3%E8%A6%81%E5%B1%95%E5%BC%80%E6%88%96%E6%8A%98%E5%8F%A0%E7%9A%84%E7%BB%84%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8A%E3%80%82%202%20href%20%E6%88%96%20data-target,%E5%B1%9E%E6%80%A7%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%AE%83%E7%9A%84%E5%80%BC%E6%98%AF%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%20id%20%E3%80%82%203%20data-parent%20%E5%B1%9E%E6%80%A7%E6%8A%8A%E6%8A%98%E5%8F%A0%E9%9D%A2%E6%9D%BF%EF%BC%88accordion%EF%BC%89%E7%9A%84%20id%20%E6%B7%BB%E5%8A%A0%E5%88%B0%E8%A6%81%E5%B1%95%E5%BC%80%E6%88%96%E6%8A%98%E5%8F%A0%E7%9A%84%E7%BB%84%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5%E4%B8%8A%E3%80%82">菜鸟教程</a>中的折叠插件结合了一下，做成了展开面板的形式。现在可以在<a href="/categories">归档</a>页面看到啦！</p>

<hr />
<h1 id="文章目录">文章目录</h1>
<p>参考<a href="https://lisz.me/tech/webmaster/jekyll-toc.html">这篇博客</a>给文章加了目录。</p>

<p>原文给出了三种方法，我采用了给 Jekyll 新增模板的方法，因为<del>我太菜了不会其他两种</del>这种方法简单高效且为 Github Pages 所原生支持。</p>
<ul>
  <li>在 <code class="language-plaintext highlighter-rouge">/_includes</code> 中新增文件 <a href="/assets/files/toc.html"><code class="language-plaintext highlighter-rouge">toc.html</code></a></li>
  <li>在 <code class="language-plaintext highlighter-rouge">_layouts</code> 中需要目录的地方加上一行代码 <code class="language-plaintext highlighter-rouge">\{\% include toc.html html=content \%\}</code>（记得删掉转义字符即可）</li>
</ul>

<p>其实我想把目录做成放在页面侧边的 sticky 样式，但是我的前端水平和我本站贫瘠的内容不允许我多折腾，于是就此作罢，放在顶部也挺好的对吧 :)</p>]]></content><author><name>Leighton</name></author><category term="Jekyll" /><summary type="html"><![CDATA[之前添加各种功能的时候零散地写了几篇东西，似乎很没有条理的样子。以后博客建设的相关内容都会集中在这里，也许会持续更新( ᐛ )]]></summary></entry><entry><title type="html">博客的图片支持测试</title><link href="http://localhost:4000/jekyll/Image-Support/" rel="alternate" type="text/html" title="博客的图片支持测试" /><published>2023-12-12T00:00:00+08:00</published><updated>2023-12-12T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/Image-Support</id><content type="html" xml:base="http://localhost:4000/jekyll/Image-Support/"><![CDATA[<p>根据 Jekyll 的官方文档尝试进行图片支持。一张都市天际线城市的轨交地图：
<img src="/assets/images/RailwayMap.png" alt="有帮助的截图" /></p>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="Jekyll" /><summary type="html"><![CDATA[根据 Jekyll 的官方文档尝试进行图片支持。一张都市天际线城市的轨交地图：]]></summary></entry><entry><title type="html">AirSim：PX4软件在环仿真</title><link href="http://localhost:4000/airsim/AirSim-with-PX4/" rel="alternate" type="text/html" title="AirSim：PX4软件在环仿真" /><published>2023-12-11T00:00:00+08:00</published><updated>2023-12-11T00:00:00+08:00</updated><id>http://localhost:4000/airsim/AirSim-with-PX4</id><content type="html" xml:base="http://localhost:4000/airsim/AirSim-with-PX4/"><![CDATA[<p>今天被在 WSL2 上配置 PX4 困扰了许久，记录以下近几天解决该问题的过程。</p>

<h1 id="目的">目的</h1>
<p>想要在 AirSim 仿真中使用 PX4 作为飞控。由于手边并没有 Pixhawk、树莓派之类的硬件，考虑使用 Windows Subsystem Linux 2 (WSL2) 作为 PX4 的载体。</p>

<h1 id="wsl-安装">WSL 安装</h1>
<ol>
  <li>在 “Windows功能” 中勾选 “适用于 Linux 的 Windows 子系统” 与 “虚拟机平台” 两个选项</li>
  <li>安装 Linux 发行版
    <ol>
      <li>在 PowerShell 中输入
 <code class="language-plaintext highlighter-rouge">wsl --install</code>
 即可安装最新的 Ubuntu 发行版</li>
      <li>按照提示创建账户与密码
        <ul>
          <li>遇到错误0x800701bc，需更新 WSL 内核至最新版本：https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</li>
        </ul>
      </li>
      <li>将 WSL 迁移至其他盘防止 C 盘爆炸
        <ul>
          <li>关闭当前 WSL
 <code class="language-plaintext highlighter-rouge">wsl --shutdown</code></li>
          <li>迁移
 <code class="language-plaintext highlighter-rouge">wsl --export Ubuntu E:/export.tar</code></li>
          <li>将原有的Linux卸载
 <code class="language-plaintext highlighter-rouge">wsl --unregister Ubuntu</code></li>
          <li>将导出的文件放到需要保存的地方，进行导入即可
` wsl –import Ubuntu E:\export\ E:\export.tar –version 2`</li>
        </ul>
      </li>
    </ol>
  </li>
</ol>

<h1 id="airsim-安装">AirSim 安装</h1>
<p>此前已完成，此处不再赘述。可参考https://zhuanlan.zhihu.com/p/618440744</p>

<h1 id="px4-安装与配置">PX4 安装与配置</h1>
<ol>
  <li>
    <p>下载
 启动 WSL2，新建保存 PX4 的文件夹并进入
 <code class="language-plaintext highlighter-rouge">mkdir PX4</code>
 <code class="language-plaintext highlighter-rouge">cd PX4</code>
 使用 git 下载
 <code class="language-plaintext highlighter-rouge">git clone https://github.com/PX4/PX4-Autopilot.git</code>
 <code class="language-plaintext highlighter-rouge">cd PX4-Autopilot</code></p>
  </li>
  <li>在 SITL (Software-In-Loop) 模式下构建并启动 PX4 固件：
 <code class="language-plaintext highlighter-rouge">make px4_sitl_default none_iris</code>
    <ul>
      <li>记得在构建似乎会显示缺少某个 Python Module，使用 pip 安装后重新执行词条命令即可</li>
    </ul>
  </li>
  <li>
    <p>构建完成后，Linux 命令行窗口应该会显示
<code class="language-plaintext highlighter-rouge">INFO [simulator] Waiting for simulator to accpet connection on TPC port 4560</code>
此时已构建完成，进入了运行状态，可以先使用 ctrl+C 退出运行。</p>
  </li>
  <li>更改 settings.json
 目前，我们的 AirSim 仍在 simple_flight 模式。我们需要更改主机中的 <code class="language-plaintext highlighter-rouge">文档/AirSim/settings.json</code>为以下内容：
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="p">{</span><span class="w">
     </span><span class="nl">"SettingsVersion"</span><span class="p">:</span><span class="w"> </span><span class="mf">1.2</span><span class="p">,</span><span class="w">
     </span><span class="nl">"SimMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Multirotor"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"ClockType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SteppableClock"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"Vehicles"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
         </span><span class="nl">"PX4"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
             </span><span class="nl">"VehicleType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PX4Multirotor"</span><span class="p">,</span><span class="w">
             </span><span class="nl">"UseSerial"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
             </span><span class="nl">"LockStep"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
             </span><span class="nl">"UseTcp"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
             </span><span class="nl">"TcpPort"</span><span class="p">:</span><span class="w"> </span><span class="mi">4560</span><span class="p">,</span><span class="w">
             </span><span class="nl">"ControlIp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"172.30.146.169"</span><span class="p">,</span><span class="w">
             </span><span class="nl">"ControlPortLocal"</span><span class="p">:</span><span class="w"> </span><span class="mi">14540</span><span class="p">,</span><span class="w">
             </span><span class="nl">"ControlPortRemote"</span><span class="p">:</span><span class="w"> </span><span class="mi">14580</span><span class="p">,</span><span class="w">
             </span><span class="nl">"LocalHostIp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"172.30.144.1"</span><span class="p">,</span><span class="w">
             </span><span class="nl">"Sensors"</span><span class="p">:{</span><span class="w">
                 </span><span class="nl">"Barometer"</span><span class="p">:{</span><span class="w">
                     </span><span class="nl">"SensorType"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
                     </span><span class="nl">"Enabled"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
                     </span><span class="nl">"PressureFactorSigma"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0001825</span><span class="w">
                 </span><span class="p">}</span><span class="w">
             </span><span class="p">},</span><span class="w">
             </span><span class="nl">"Parameters"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                 </span><span class="nl">"NAV_RCL_ACT"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"NAV_DLL_ACT"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"COM_OBL_ACT"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"LPE_LAT"</span><span class="p">:</span><span class="w"> </span><span class="mf">47.641468</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"LPE_LON"</span><span class="p">:</span><span class="w"> </span><span class="mf">-122.140165</span><span class="w">
             </span><span class="p">}</span><span class="w">
         </span><span class="p">}</span><span class="w">
     </span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
    <p><strong>注意</strong>，<code class="language-plaintext highlighter-rouge">"LocalHostIp"</code> 与 <code class="language-plaintext highlighter-rouge">"ControlIp"</code> 字段分别应为主机和 WSL 的 IP 地址！</p>
    <ul>
      <li>在主机的命令行中输入 <code class="language-plaintext highlighter-rouge">ipconfig</code>，“以太网适配器 vEthernet (WSL)” 中的 “IPV4 地址” 即为主机地址</li>
      <li>在 Linux 命令行中输入 <code class="language-plaintext highlighter-rouge">ip address show</code> 即可查看 WSL 的 IP 地址</li>
    </ul>
  </li>
  <li>
    <p>设置环境变量
我们需要让 Linux 指导自己在和谁通讯，故在 Linux 命令行中输入以下命令以添加（或改变）环境变量
<code class="language-plaintext highlighter-rouge">export PX4_SIM_HOST_ADDR=172.30.144.1</code>
注意，此处的 IP 地址应为主机 IP。</p>
  </li>
  <li>更改 Linux 中的 <code class="language-plaintext highlighter-rouge">PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/rcS</code> 文件
更改这个文件之前，我一度出现了 PX4 与 AirSim 无法连接、成功连接后无法使用 Python API 等问题。经过仔细阅读官方文档中的 “PX4 SITL with WSL2”，发现了此处需要更改，原因未知（悲）。如果没有以下内容，则将它们加入到该文件中：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # If PX4_SIM_HOST_ADDR environment variable is empty use localhost.
 if [ -z "${PX4_SIM_HOST_ADDR}" ]; then
     echo "PX4 SIM HOST: localhost"
     simulator start -c $simulator_tcp_port
 else
     echo "PX4 SIM HOST: $PX4_SIM_HOST_ADDR"
     simulator start -t $PX4_SIM_HOST_ADDR $simulator_tcp_port
 fi
</code></pre></div>    </div>
  </li>
  <li>完成后，启动 sln 文件的调试以进入 UE4 编辑器，并在 Linux 中启动 PX4：
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> make px4_sitl_defalut none_iris
</code></pre></div>    </div>
    <p>我们就完成了 PX4 作为飞控的 AirSim 仿真啦！</p>
  </li>
</ol>

<h1 id="使用">使用</h1>
<ul>
  <li>可以在 PX4 端输入命令以控制无人机，如 <code class="language-plaintext highlighter-rouge">commander takeoff</code> 可控制无人机起飞，<code class="language-plaintext highlighter-rouge">commander land</code> 可控制无人机降落。</li>
  <li>调用 Python API 的操作与使用 simple_flight 模式下相同，直接运行 Python 脚本即可！</li>
</ul>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="AirSim" /><summary type="html"><![CDATA[今天被在 WSL2 上配置 PX4 困扰了许久，记录以下近几天解决该问题的过程。]]></summary></entry><entry><title type="html">SLAM技术学习：滤波</title><link href="http://localhost:4000/misc/filter/" rel="alternate" type="text/html" title="SLAM技术学习：滤波" /><published>2023-07-13T00:00:00+08:00</published><updated>2023-07-13T00:00:00+08:00</updated><id>http://localhost:4000/misc/filter</id><content type="html" xml:base="http://localhost:4000/misc/filter/"><![CDATA[<p>假期总该学点东西。对 SLAM 技术有一些兴趣，小开一个坑。</p>

<h1 id="什么是-slam">什么是 SLAM</h1>
<p>S.L.A.M.全称为Simultaneous Localization and Mapping，是以定位和建图两大技术为目标的一个研究领域。目前主流的SLAM技术应用为激光SLAM(基于激光雷达)和视觉SLAM(基于单/双目摄像头)，实现上主要分为基于滤波 （Filter-Based） 的SLAM，和基于图优化（Graph-Based）的SLAM。</p>

<p>SLAM 的架构如下图所示。
<img src="/assets/images/SLAM_arch.jpg" alt="" /></p>

<h1 id="基于滤波的传感器融合算法方案">基于滤波的传感器融合算法方案</h1>
<p>归结基于滤波的定位算法的核心技术，其实就是贝叶斯滤波或者其衍生算法。整体上的流程大抵都是基于上一时刻的状态量，通过控制量输入和运动方程的推演获取预测的状态量，再由相关传感器的观测对预测进行融合“补偿”。</p>

<h1 id="滤波算法卡尔曼滤波">滤波算法：卡尔曼滤波</h1>
<p>今天 <del>预习</del> 复习一下机器人综合实践课程中介绍的卡尔曼滤波算法。</p>

<h3 id="滤波器">滤波器</h3>
<p>在 DSP 中接触过滤波器。主要用于滤除信号中的噪声。以下面离散时间的低通滤波器为例：</p>

<div class="kdmath">$$
y_t=\alpha x_t + (1-\alpha)y_{t-1}
$$</div>

<p>它的截止频率为 $f_c=\frac{\alpha}{(1-\alpha)2\pi \Delta t}$。其中 $\Delta t$是采样周期。任何频率大于 $f_c$ 的信号通过该滤波器都会得到极大的衰减，可以用于滤除高频噪声。</p>

<p>Kalman 滤波器则不同。它直接在时域中处理滤波问题，并且在线性系统下是最小方差估计。1960 年，时任美
国宇航局加利福尼亚州 Ames Research Center（ARC）动力分析处主任的斯坦尼 • 施密特（Stanley F. Schmidt）正在阿波罗-11 号登月计划中主持导航项目。当年，宇宙飞船从陀螺仪、加速度计和雷达等传感器上获取的测量数据中充满了不确定性误差和随机噪声，严重地威胁着高速飞向月球并降落其岩石表面的宇宙飞船及宇航员的安全。因此他们必须从测量数据中把噪声滤掉，以便对飞船所处位置和运动速度作出非常精确的估算。经过多方认证和周密思考之后，施密特决定在阿波罗-11 号登月计划中采用 Kalman 滤波器，并成功让阿波罗-11 号在地球和月球之间飞了一个来回。</p>

<h3 id="最小协方差估计与后验概率传递">最小协方差估计与后验概率传递</h3>
<p>Kalman 滤波器是对信号的最小方差估计，其实现手段是通过迭代的方式计算隐 Markov 模型中隐状态的后验分布的数学期望。</p>

<h3 id="kalman-滤波的数学原理">Kalman 滤波的数学原理</h3>
<p><em>此处简化了推导，仅从噪声服从高斯分布的情况推导。事实上 Kalman 本人对于该滤波器的推导是基于 Hilbert 空间下的投影原理。</em></p>

<p>假设现有下列隐 Markov 模型：</p>

<p><span class="kdmath">$x_{t+1}=A_t x_t + Bu_t +w_t$</span>
<span class="kdmath">$y_t=C_tx_t+v_t$</span></p>

<p>其中 $x_t\in\mathbb R^n$ 为系统的状态；$y_t\in\mathbb R^p$ 为对系统的观测（或系统的输出），$w_t\sim \mathcal N(0,1)$ 为过程噪声，$v_t\sim\mathcal N(0,\Sigma_v)$ 为观测噪声；$w_t$ 和 $v_t$ 均为白噪声；初始状态的先验分布为 $x_1\sim\mathcal N(m_1,P_1)$。</p>

<p>依据上述假设，可知</p>

<div class="kdmath">$$
\begin{align*}
p(x_{t+1}|x_t,u_t)=\mathcal N(A_tx_t+Bu_t,\Sigma_w) \\
p(y_t|x_t)=\mathcal N(C_tx_t,\Sigma_v)
\end{align*}
$$</div>

<p>以下有两个引理，证明略。</p>

<hr />

<p><strong>Lemma 1</strong> 若 $x\in\mathbb R^{d_x}\sim\mathcal N(m,p),y\in\mathbb R^{d_y}|x \sim \mathcal N(Hx+u,R)$，则
$x$ 和 $y$ 的联合分布服从</p>

<div class="kdmath">$$
\begin{bmatrix}
x\\
y
\end{bmatrix}\sim\mathcal N\left(\begin{bmatrix}
m\\
Hm+u
\end{bmatrix},\begin{bmatrix}
P & PH^\top\\
HP & HPH^\top+R
\end{bmatrix}\right)
$$</div>

<p><strong>Lemma 2</strong> 如果随机向量 $x\in\mathbb R^n$ 和 $y\in\mathbb R^m$ 服从以下联合高斯分布</p>

<div class="kdmath">$$
\begin{bmatrix}
x\\
y
\end{bmatrix}\sim\mathcal N\left(\begin{bmatrix}
a\\
b
\end{bmatrix},\begin{bmatrix}
A & C\\
C^\top & B
\end{bmatrix}\right)
$$</div>

<p>则</p>

<div class="kdmath">$$
\begin{align*}
x\sim \mathcal N(a,A),\quad y\sim\mathcal N(b,B) \\
x|y\sim\mathcal N(a+CB^{-1}(y-b),A-CB^{-1}C^\top)\\
y|x\sim\mathcal N(b+C^\top A^{-1}(x-a),B-C^\top A^{-1}C)
\end{align*}
$$</div>

<hr />

<p>有了上述两个引理，我们可以在高斯噪声的假设下推导 Kalman 滤波器的迭代时。不妨假设
$x_t|u_{1:t-1},y_{1:t}\sim \mathcal N(\hat x_{t|t},P_{t|t})$。由引理 1 可得</p>

<div class="kdmath">$$
\begin{align*}
p(x_{t+1},x_t|u_{1:t},y_{1:t})&=p(x_{t+1}|x_t,u_t)p(x_t|u_{1:t-1},y_{1:t})\sim\mathcal N(A_tx_t+Bu_t,\Sigma_w)\mathcal N(\hat x_{t|t},P_{t|t}) \\
&\sim\mathcal N\left( \begin{bmatrix}
\hat x_{t|t} \\
A_tx_{t|t}+Bu_t
\end{bmatrix},\begin{bmatrix}
P_{t|t} & P_{t|t}A_t^\top \\
A_tP_{t|t} & A_tP_{t|t}A^\top+\Sigma_w
\end{bmatrix}\right)
\end{align*}
$$</div>

<p>由引理 2 可得</p>

<div class="kdmath">$$
p(x_{t+1}|u_{1:t},y_{1:t})=\mathcal N(A_t\hat x_{t|t}+Bu_t, A_tP_{t|t}A^\top+\Sigma_w)
$$</div>

<p>至此，我们得到了 Kalman 滤波器的前半部分 Prediction step:</p>

<div class="kdmath">$$
\begin{align*}
\hat x_{t+1|t}=A_t\hat x_{t|t}+Bu_t \\
P_{t+1|t}=A_tP_{t|t}A^\top+\Sigma_w
\end{align*}
$$</div>

<p>另一方面，根据引理 1，有
<span class="kdmath">$\begin{align*}
p(x_{t+1},y_{t+1}|u_{1:t},y_{1:t}) &= p(y_{t+1}|x_{t+1})p(x_{t+1}|u_{1:t},y_{1:t}) \\
&\sim\mathcal N(C_tx_t,\Sigma_v)\mathcal N(\hat x_{t+1|t},P_{t+1|t}) \\
&=\mathcal N\left(\begin{bmatrix}
\hat x_{t+1|t} \\
C\hat x_{t+1|t}
\end{bmatrix},\begin{bmatrix}
P_{t+1|t} & P_{t+1|t} C^\top \\
CP_{t+1|t} & CP_{t+1|t}C^\top+\Sigma_v
\end{bmatrix}\right)
\end{align*}$</span></p>

<p>根据引理 2，可进一步求得后验概率分布</p>

<div class="kdmath">$$
p(x_{t+1}|u_{1:t},y_{1:t+1})=\mathcal N(\hat x_{t+1|t+1},P_{t+1|t+1})
$$</div>

<p>其中，</p>

<div class="kdmath">$$
\begin{align*}
&\hat x_{t+1|t+1}=\hat x_{t+1|t}+P_{t+1|t} C^\top(CP_{t+1|t}C^\top+\Sigma_v)^{-1} (y_{t+1}-C\hat x_{t+1|t}) \\
&P_{t+1|t+1}=P_{t+1|t}-P_{t+1|t}C^\top(CP_{t+1|t}C^\top+\Sigma_v)^{-1} C(P_{t+1|t})
\end{align*}
$$</div>

<p>此即 Kalman 滤波器的后半部分 Correction (Update) Step。</p>

<p>此，我们得到了 Kalman 滤波器的后半部分——Correction （Update）Step。Kalman 滤波器通过 Prediction step 和 Correction step 交替迭代，成功地通过 $p(x_t
| u_{1:t−1}, y_{1:t})$ 来计算 $p(x_{t+1} | u_{1:t}
, y_{1:t+1})$。值得注意的是，该算法需要一个初始分布 $p(x_1)$，用于求 $p(x_1 | y_1)$，
所以我们需要指定 $x_1$ 的先验分布 $x_1\sim \mathcal N (m_1, P_1)$。</p>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="MISC" /><summary type="html"><![CDATA[假期总该学点东西。对 SLAM 技术有一些兴趣，小开一个坑。]]></summary></entry><entry><title type="html">My First Blog</title><link href="http://localhost:4000/jekyll/first-blog/" rel="alternate" type="text/html" title="My First Blog" /><published>2023-07-10T00:00:00+08:00</published><updated>2023-07-10T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/first-blog</id><content type="html" xml:base="http://localhost:4000/jekyll/first-blog/"><![CDATA[<p>This is my first blog! Hello World!</p>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="Jekyll" /><summary type="html"><![CDATA[This is my first blog! Hello World!]]></summary></entry><entry><title type="html">Latex Support For My Blog</title><link href="http://localhost:4000/jekyll/latex-support-for-my-blog/" rel="alternate" type="text/html" title="Latex Support For My Blog" /><published>2023-07-10T00:00:00+08:00</published><updated>2023-07-10T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/latex-support-for-my-blog</id><content type="html" xml:base="http://localhost:4000/jekyll/latex-support-for-my-blog/"><![CDATA[<p>My blog has been established successfully today. However, Jekyll’s native Markdown interpreter doesn’t always work well with Latex. This article records how I add $\LaTeX$ support for my site.</p>

<ul>
  <li>Disable the math intepreter of Kramdown by adding the following code in _config.yml</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">kramdown:
    math_engine: </span><span class="n">null</span>
    </code></pre></figure>

<ul>
  <li>Include MathJax by adding the following script in ./_includes/head.html</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s2">"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span> <span class="n">type</span><span class="o">=</span><span class="s2">"text/javascript"</span><span class="o">&gt;&lt;</span><span class="sr">/script&gt;
&lt;script type="text/x</span><span class="o">-</span><span class="n">mathjax</span><span class="o">-</span><span class="n">config</span><span class="s2">"&gt;
  MathJax.Hub.Config({
    tex2jax: {
      skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
      inlineMath: [['$','$']]
    }
  });
&lt;/script&gt;
    </span></code></pre></figure>

<p>Now we can enter the $\LaTeX$ equations successfully! For example:</p>

<div class="kdmath">$$
e^{i\theta}=\cos\theta+i\sin\theta
$$</div>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="Jekyll" /><summary type="html"><![CDATA[My blog has been established successfully today. However, Jekyll’s native Markdown interpreter doesn’t always work well with Latex. This article records how I add $\LaTeX$ support for my site.]]></summary></entry><entry><title type="html">Welcome To Jekyll</title><link href="http://localhost:4000/jekyll/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome To Jekyll" /><published>2016-05-20T00:00:00+08:00</published><updated>2016-05-20T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="http://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Leighton Wang</name><email>wtrwang7@sjtu.edu.cn</email></author><category term="Jekyll" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>